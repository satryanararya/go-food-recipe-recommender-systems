name: Prooduction CI/CD Golang

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: go-chefbot

jobs:
  run_test:
    runs-on: ubuntu-22.04
    name: Testing usecase layer
    steps:
      - name: Checkout repository folders
        uses: actions/checkout@v4

      - name: Setup Go version 1.22.0
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.0'

      - name: Run test
        run: |
          go test ./usecases -v -cover

  build_and_push:
    runs-on: ubuntu-22.04
    name: Build image and push to registry
    needs: run_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-22.04
    name: Deploy to EC2
    needs: build_and_push
    steps:
      - name: Connect and Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          CONTAINER_NAME: go-chefbot
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          HOST_PORT: ${{ secrets.HOST_PORT }}
          CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          envs: CONTAINER_NAME,DOCKERHUB_USERNAME,HOST_PORT,CONTAINER_PORT,ENV_FILE,IMAGE_NAME
          script_stop: true
          script: |
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
            docker image rm $DOCKERHUB_USERNAME/$IMAGE_NAME
            docker pull $DOCKERHUB_USERNAME/$IMAGE_NAME
            docker run -dp $HOST_PORT:$CONTAINER_PORT \
            --name=$CONTAINER_NAME \
            --env-file=$ENV_FILE \
            $DOCKERHUB_USERNAME/$IMAGE_NAME
            exit
