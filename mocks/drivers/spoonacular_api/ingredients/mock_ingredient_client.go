// Code generated by mockery v2.43.0. DO NOT EDIT.

package ingredients

import (
	context "context"

	ingredients "github.com/satryanararya/go-chefbot/drivers/spoonacular_api/ingredients"
	mock "github.com/stretchr/testify/mock"

	user "github.com/satryanararya/go-chefbot/dto/user"
)

// MockIngredientClient is an autogenerated mock type for the IngredientClient type
type MockIngredientClient struct {
	mock.Mock
}

// GetIngredient provides a mock function with given fields: ctx, ingredientID
func (_m *MockIngredientClient) GetIngredient(ctx context.Context, ingredientID int) (*ingredients.Ingredient, error) {
	ret := _m.Called(ctx, ingredientID)

	if len(ret) == 0 {
		panic("no return value specified for GetIngredient")
	}

	var r0 *ingredients.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*ingredients.Ingredient, error)); ok {
		return rf(ctx, ingredientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *ingredients.Ingredient); ok {
		r0 = rf(ctx, ingredientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ingredients.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ingredientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchIngredient provides a mock function with given fields: ctx, dto
func (_m *MockIngredientClient) SearchIngredient(ctx context.Context, dto *user.UserAllergiesRequest) (int, error) {
	ret := _m.Called(ctx, dto)

	if len(ret) == 0 {
		panic("no return value specified for SearchIngredient")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserAllergiesRequest) (int, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserAllergiesRequest) int); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.UserAllergiesRequest) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIngredientClient creates a new instance of MockIngredientClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngredientClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngredientClient {
	mock := &MockIngredientClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
