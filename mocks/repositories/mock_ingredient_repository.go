// Code generated by mockery v2.43.0. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/satryanararya/go-chefbot/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockIngredientRepository is an autogenerated mock type for the IngredientRepository type
type MockIngredientRepository struct {
	mock.Mock
}

// ExistsByName provides a mock function with given fields: ctx, name
func (_m *MockIngredientRepository) ExistsByName(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockIngredientRepository) Get(ctx context.Context, id int) (*entities.Ingredient, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.Ingredient, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.Ingredient); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *MockIngredientRepository) GetByName(ctx context.Context, name string) (*entities.Ingredient, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *entities.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.Ingredient, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Ingredient); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, ingredient
func (_m *MockIngredientRepository) Save(ctx context.Context, ingredient *entities.Ingredient) error {
	ret := _m.Called(ctx, ingredient)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Ingredient) error); ok {
		r0 = rf(ctx, ingredient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIngredientRepository creates a new instance of MockIngredientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIngredientRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIngredientRepository {
	mock := &MockIngredientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
