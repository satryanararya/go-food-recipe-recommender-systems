// Code generated by mockery v2.43.0. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/satryanararya/go-chefbot/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockRecommendationRepository is an autogenerated mock type for the RecommendationRepository type
type MockRecommendationRepository struct {
	mock.Mock
}

// CreateRecommendation provides a mock function with given fields: ctx, recommendation
func (_m *MockRecommendationRepository) CreateRecommendation(ctx context.Context, recommendation *[]entities.Recommendation) error {
	ret := _m.Called(ctx, recommendation)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecommendation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]entities.Recommendation) error); ok {
		r0 = rf(ctx, recommendation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecommendation provides a mock function with given fields: ctx, userID
func (_m *MockRecommendationRepository) GetRecommendation(ctx context.Context, userID int64) (*[]entities.Recommendation, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecommendation")
	}

	var r0 *[]entities.Recommendation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*[]entities.Recommendation, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *[]entities.Recommendation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.Recommendation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRecommendationRepository creates a new instance of MockRecommendationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecommendationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecommendationRepository {
	mock := &MockRecommendationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
