// Code generated by mockery v2.43.0. DO NOT EDIT.

package repositories

import (
	context "context"

	entities "github.com/satryanararya/go-chefbot/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockRecipeRepository is an autogenerated mock type for the RecipeRepository type
type MockRecipeRepository struct {
	mock.Mock
}

// CreateRecipe provides a mock function with given fields: ctx, recipe
func (_m *MockRecipeRepository) CreateRecipe(ctx context.Context, recipe *entities.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecipe provides a mock function with given fields: ctx, id
func (_m *MockRecipeRepository) DeleteRecipe(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecipe provides a mock function with given fields: ctx, id
func (_m *MockRecipeRepository) GetRecipe(ctx context.Context, id int64) (*entities.Recipe, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipe")
	}

	var r0 *entities.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*entities.Recipe, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *entities.Recipe); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecipe provides a mock function with given fields: ctx, recipe
func (_m *MockRecipeRepository) UpdateRecipe(ctx context.Context, recipe *entities.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRecipeRepository creates a new instance of MockRecipeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecipeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecipeRepository {
	mock := &MockRecipeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
