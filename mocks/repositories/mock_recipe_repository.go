// Code generated by mockery v2.43.0. DO NOT EDIT.

package repositories

import (
	context "context"

	dto "github.com/satryanararya/go-chefbot/dto"
	entities "github.com/satryanararya/go-chefbot/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRecipeRepository is an autogenerated mock type for the RecipeRepository type
type MockRecipeRepository struct {
	mock.Mock
}

// CreateRecipe provides a mock function with given fields: ctx, recipe
func (_m *MockRecipeRepository) CreateRecipe(ctx context.Context, recipe *entities.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecipe provides a mock function with given fields: ctx, recipe
func (_m *MockRecipeRepository) DeleteRecipe(ctx context.Context, recipe *entities.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecipe provides a mock function with given fields: ctx, recipeID
func (_m *MockRecipeRepository) GetRecipe(ctx context.Context, recipeID int) (*entities.Recipe, error) {
	ret := _m.Called(ctx, recipeID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecipe")
	}

	var r0 *entities.Recipe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entities.Recipe, error)); ok {
		return rf(ctx, recipeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entities.Recipe); ok {
		r0 = rf(ctx, recipeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, recipeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRecipes provides a mock function with given fields: ctx, id, p
func (_m *MockRecipeRepository) GetUserRecipes(ctx context.Context, id uuid.UUID, p *dto.PaginationRequest) ([]entities.Recipe, int64, error) {
	ret := _m.Called(ctx, id, p)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRecipes")
	}

	var r0 []entities.Recipe
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.PaginationRequest) ([]entities.Recipe, int64, error)); ok {
		return rf(ctx, id, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.PaginationRequest) []entities.Recipe); ok {
		r0 = rf(ctx, id, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Recipe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *dto.PaginationRequest) int64); ok {
		r1 = rf(ctx, id, p)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, *dto.PaginationRequest) error); ok {
		r2 = rf(ctx, id, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRecipe provides a mock function with given fields: ctx, recipe
func (_m *MockRecipeRepository) UpdateRecipe(ctx context.Context, recipe *entities.Recipe) error {
	ret := _m.Called(ctx, recipe)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecipe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Recipe) error); ok {
		r0 = rf(ctx, recipe)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRecipeRepository creates a new instance of MockRecipeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecipeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecipeRepository {
	mock := &MockRecipeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
