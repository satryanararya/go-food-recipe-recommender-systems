// Code generated by mockery v2.43.0. DO NOT EDIT.

package password

import mock "github.com/stretchr/testify/mock"

// MockPasswordUtil is an autogenerated mock type for the PasswordUtil type
type MockPasswordUtil struct {
	mock.Mock
}

// ComparePassword provides a mock function with given fields: _a0, hash
func (_m *MockPasswordUtil) ComparePassword(_a0 string, hash string) error {
	ret := _m.Called(_a0, hash)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashPassword provides a mock function with given fields: _a0
func (_m *MockPasswordUtil) HashPassword(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPasswordUtil creates a new instance of MockPasswordUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPasswordUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPasswordUtil {
	mock := &MockPasswordUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
